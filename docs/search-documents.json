{
  "references/eClassifiers/Task/references/eStructuralFeatures/callback/index.html": {
    "path": "Task/References/callback",
    "link-uuid": "1bfa9fd5-f7ad-4fbb-9978-f7fdb3588ac0",
    "title": "callback",
    "content": "Function to be executed after task completion."
  },
  "references/eClassifiers/Task/inheritance.html": {
    "path": "Task/Inheritance",
    "link-uuid": "14f32a84-22d0-4477-a9e1-dfd6eeeb9dbb",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/KnowledgeSource/inheritance.html": {
    "path": "Knowledge Source/Inheritance",
    "link-uuid": "78258f20-49c1-468f-b4f1-e04e920e1d67",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Function/index.html": {
    "link-uuid": "5dd92edb-8503-4112-9728-1c95abd9297a",
    "title": "Function",
    "content": "Generates a python function."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/embedder/index.html": {
    "path": "Crew/References/embedder",
    "link-uuid": "3a84bdcf-ca10-4798-9cbd-0a5d3afb72ec",
    "title": "embedder",
    "content": "Configuration for the embedder to be used by the crew."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/stepCallback/index.html": {
    "path": "Crew/References/stepCallback",
    "link-uuid": "0133807c-995c-42ed-80cb-b1b5bd39fb64",
    "title": "stepCallback",
    "content": "A function that is called after each step of every agent. This can be used to log the agent&rsquo;s actions or to perform other operations; it won&rsquo;t override the agent-specific step callback."
  },
  "references/eClassifiers/Task/index.html": {
    "link-uuid": "31826a3d-29ff-479a-87e8-c68975266792",
    "title": "Task",
    "content": "A Task is a specific assignment completed by an Agent. Tasks provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities. Tasks can be collaborative, requiring multiple agents to work together."
  },
  "references/eClassifiers/Tool/inheritance.html": {
    "path": "Tool/Inheritance",
    "link-uuid": "509905ac-2ff2-4b24-8f70-2cdd10cc0517",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Code/references/eStructuralFeatures/code/index.html": {
    "path": "Code/Attributes/code",
    "link-uuid": "4bf63db4-ff7c-4621-99d0-04bd39324080",
    "title": "code",
    "content": "How code attribute is used is subclass-specific: Crew - code is added to the top of the generated crew class after configuration fields and before any other declarations. Agent and Task - code is used as agent/task method body template. Function - code is used to produce function body. Tool - what is added to the tools array. E.g. SerperDevTool(). Code can contain interpolation tokens for adding imports. Example: my_var = ${spel:addItemImport('my_module', 'my_item').item}\n spel: is a prefix for Spring Expression Language tokens. addItemImport('my_module', 'my_item').item - calls org.nasdanika.models.python.Source.addImport() method and then getItem() value of the result. Import methods: addItemImport(module, item) - the method used above addItemImport(module, item, name) - in this case use .name addModuleImport(module) - in this case use add dot and imported item after the token. e.g. ${spel:addModuleImport('my_module').module}.my_item addModuleImport(module, alias) - in this case use add dot and imported item after the token. e.g. ${spel:addModuleImport('my_module', 'mi_modulo').alias}.my_item"
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/afterKickoff/index.html": {
    "path": "Crew/References/afterKickoff",
    "link-uuid": "ed0789a3-b496-434f-ad5a-56903d573391",
    "title": "afterKickoff",
    "content": "Executes after the crew finishes."
  },
  "references/eClassifiers/Task/references/eStructuralFeatures/taskDescription/index.html": {
    "path": "Task/Attributes/taskDescription",
    "link-uuid": "7883fbd4-564a-4299-8656-d746700419d8",
    "title": "taskDescription",
    "content": "A clear, concise statement of what the task entails."
  },
  "references/eClassifiers/Task/references/eStructuralFeatures/tools/index.html": {
    "path": "Task/References/tools",
    "link-uuid": "64fab553-209b-4e4b-8936-3c9029389655",
    "title": "tools",
    "content": "The tools/resources the agent is limited to use for this task."
  },
  "references/eClassifiers/Guardrail/index.html": {
    "link-uuid": "68ca0c54-5607-4513-936c-aa9688113b66",
    "title": "Guardrail",
    "content": "Task guardrails provide a powerful way to validate, transform, or filter task outputs before they are passed to the next task. Guardrails are optional functions that execute before the next task starts, allowing you to ensure that task outputs meet specific requirements or formats."
  },
  "references/eClassifiers/KnowledgeSource/index.html": {
    "link-uuid": "3d937ff5-8f51-4ec5-b940-6ab9b70f6086",
    "title": "Knowledge Source",
    "content": "Knowledge allows agents to access and utilize external information sources during their tasks. Think of it as giving your agents a reference library they can consult while working."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/functionCallingLlm/index.html": {
    "path": "Crew/References/functionCallingLlm",
    "link-uuid": "d7563b14-899b-4e1e-a073-ddb24c62aeb3",
    "title": "functionCallingLlm",
    "content": "If passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew&rsquo;s LLM for function calling."
  },
  "index.html": {
    "link-uuid": "fba75d77-d6a8-406d-8a49-3903df03c8d2",
    "title": "CrewAI Model",
    "content": "The CrewAI model can be used as a reference guide complementary to the official documentation1. Hover the mouse over the diagram elements above for short descriptions (tooltips), click to navigate to element pages with more details. The above diagram is conceptual - it shows only the most important classes and relationships. The generated UML class diagram provides more details. Hover the mouse over diagram elements for tooltips, click to navigate to class/feature pages. You can also use the default graph and other graphs to quickly grasp relationships of the model elements. Hover the mouse over graph nodes for tooltips and to highlight their reated classes. Drag to rearrange, double-click to navigate to class pages. It can also be used as a starting point for an organization-specific documentation - make a copy or fork, modify descriptions of model elements. For example, add links to catalogs of internal knowledge sources or approved/available LLMs and their configurations. Similarly, you may have a catalog of reusable agents or guardrails. You may also have organization-specific development guidelines with references to shared libraries and internal productivity tools such as code generators, wizards, IDE plugins, training resources, &hellip; You can also create a custom model by extending classes in this model and add classes and features specific to your organization. For example, catalogs, ownership and reponsibilities, alignment to organizational structure, development efforts, etc. However, the main objective of the model is to serve as an intermediary for code and documentation generation. The model can be populated from diagrams and other data sources. Then it produces a python model and, finally, Python sources and supporting artifacts. The model can be created from Drawio diagrams using exeutable diagrams or semantic mapping. You can find an example of programmatic population of a model here. The below code snippet shows how to generate a python source file and configuration files using CrewGenerator: CapabilityLoader capabilityLoader = new CapabilityLoader();\nProgressMonitor progressMonitor = new PrintStreamProgressMonitor();\nRequirement&lt;ResourceSetRequirement, ResourceSet&gt; requirement = ServiceCapabilityFactory.createRequirement(ResourceSet.class);\nResourceSet resourceSet = capabilityLoader.loadOne(requirement, progressMonitor);\n\nFile crewSourceFile = new File(&quot;target/latest-ai-developments/src/crew.py&quot;).getCanonicalFile();\nURI crewSourceURI = URI.createFileURI(crewSourceFile.getAbsolutePath());\nCrewGenerator crewGenerator = new CrewGenerator();\ncrewGenerator.generate(\n\t\tcreateCrew(),\n\t\tcrewSourceURI,\n\t\tresourceSet,\n\t\tprogressMonitor);\n You can override CrewGenerator methods to customize the generation process. Documentation in this model is copied verbatim or almost verbatim from the reference documentation for the purpose of consistency. â†© Step callback Agent You can think of an agent as a specialized team member with specific skills, expertise, and responsibilities. Task A specific assignment completed by an Agent Tool A skill or function that agents can utilize to perform various actions Guardrail Validates and transforms task outputs A crew may use multiple LLMs: * Function calling LLM * Manager LLM * Planning LLM Step and taks callbacks Crew A group of agents working together to complete a set of tasks Large Language Model (LLM) LLMs enable agents to understand context, make decisions, and generate human-like responses Knowledge Source An external source of information which agents use to work on tasks Callback A function called after completion of tasks and steps Context Family"
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/role/index.html": {
    "path": "Agent/Attributes/role",
    "link-uuid": "280a3f3e-73ba-4b0b-9d94-bc3f7ed95bef",
    "title": "role",
    "content": "Defines the agent&rsquo;s function and expertise within the crew."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/agents/index.html": {
    "path": "Crew/References/agents",
    "link-uuid": "6298934f-2f31-4f3d-ad63-b1f973f735a3",
    "title": "agents",
    "content": "Agents in this crew."
  },
  "references/eClassifiers/Function/inheritance.html": {
    "path": "Function/Inheritance",
    "link-uuid": "a5ac30a1-d385-4a7b-8e7c-acf4c22ae578",
    "title": "Inheritance",
    "content": "Supertypes Subtypes  "
  },
  "references/eClassifiers/Agent/index.html": {
    "link-uuid": "70d36b5d-110b-4228-b0a7-69c534f3b59a",
    "title": "Agent",
    "content": "An Agent is an autonomous unit that can: Perform specific tasks Make decisions based on its role and goal Use tools to accomplish objectives Communicate and collaborate with other agents Maintain memory of interactions Delegate tasks when allowed"
  },
  "references/eClassifiers/Agent/inheritance.html": {
    "path": "Agent/Inheritance",
    "link-uuid": "5d37c0d5-0bdb-4ac1-a86d-139c9fffc1d4",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/embedder/index.html": {
    "path": "Agent/References/embedder",
    "link-uuid": "b64c16c4-d615-4de2-ace9-dac1db99fefa",
    "title": "embedder",
    "content": "Configuration for the embedder used by the agent."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/taskCallback/index.html": {
    "path": "Crew/References/taskCallback",
    "link-uuid": "542e07f4-42b4-472a-9061-4e6d48e91d06",
    "title": "taskCallback",
    "content": "A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution."
  },
  "references/eClassifiers/LargeLanguageModel/inheritance.html": {
    "path": "Large Language Model/Inheritance",
    "link-uuid": "6e47d150-c60a-4e93-85e7-1c93c38f229c",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/backstory/index.html": {
    "path": "Agent/Attributes/backstory",
    "link-uuid": "2b1127c8-91fa-4e66-bf67-a6911068decf",
    "title": "backstory",
    "content": "Provides context and personality to the agent, enriching interactions."
  },
  "references/eClassifiers/Function/references/eStructuralFeatures/parameters/index.html": {
    "path": "Function/Attributes/parameters",
    "link-uuid": "077efcd0-63e4-4261-8e80-ea8835b1bdd3",
    "title": "parameters",
    "content": "A list of function parameters."
  },
  "references/eClassifiers/Task/references/eStructuralFeatures/expectedOutput/index.html": {
    "path": "Task/Attributes/expectedOutput",
    "link-uuid": "85c24f9e-8c72-4ea0-be0d-782ca4ab26d2",
    "title": "expectedOutput",
    "content": "A detailed description of what the task&rsquo;s completion looks like."
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/goal/index.html": {
    "path": "Agent/Attributes/goal",
    "link-uuid": "1d102224-eca9-43bb-89e5-2fdffdfefa20",
    "title": "goal",
    "content": "The individual objective that guides the agent&rsquo;s decision-making."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/knowledgeSources/index.html": {
    "path": "Crew/References/knowledgeSources",
    "link-uuid": "ef0ffd76-cada-4b63-b12f-1bb24de0a4b2",
    "title": "knowledgeSources",
    "content": "Knowledge sources used by agents"
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/planningLlm/index.html": {
    "path": "Crew/References/planningLlm",
    "link-uuid": "63bd2e26-c25c-4d08-be13-8de1d6453c58",
    "title": "planningLlm",
    "content": "The language model used by the AgentPlanner in a planning process"
  },
  "references/eClassifiers/Guardrail/inheritance.html": {
    "path": "Guardrail/Inheritance",
    "link-uuid": "03060ae2-177d-434a-bf4e-24ae3f52ae83",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/stepCallback/index.html": {
    "path": "Agent/References/stepCallback",
    "link-uuid": "94fbb4c2-a0a6-4b14-a1fa-cdb7f955d37a",
    "title": "stepCallback",
    "content": "Function called after each agent step, overrides crew callback."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/managerLlm/index.html": {
    "path": "Crew/References/managerLlm",
    "link-uuid": "64191df6-f2e3-420a-b7eb-8a568fbdf457",
    "title": "managerLlm",
    "content": "The language model used by the manager agent in a hierarchical process."
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/llm/index.html": {
    "path": "Agent/References/llm",
    "link-uuid": "23f701f7-8841-46f1-b927-4b6746a00330",
    "title": "llm",
    "content": "Language model that powers the agent."
  },
  "references/eClassifiers/Tool/index.html": {
    "link-uuid": "f42d6cdd-425c-4d7e-ba78-22a81299eddf",
    "title": "Tool",
    "content": "A tool is a skill or function that agents can utilize to perform various actions."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/tasks/index.html": {
    "path": "Crew/References/tasks",
    "link-uuid": "469ac84b-2e1e-49cc-8230-3b6f20d594a3",
    "title": "tasks",
    "content": "Tasks containment reference."
  },
  "references/eClassifiers/Configurable/index.html": {
    "link-uuid": "e4fd727c-3523-419c-a884-bece4710598d",
    "title": "Configurable",
    "content": "Base class for Agent and Task which can be configured with YAML."
  },
  "references/eClassifiers/Process/index.html": {
    "link-uuid": "f5a82281-2f53-44e7-af1b-e77fd7cca6db",
    "title": "Process",
    "content": "Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/managerAgent/index.html": {
    "path": "Crew/References/managerAgent",
    "link-uuid": "dc9e6a0e-bcc6-4777-9deb-7a4f7307fdac",
    "title": "managerAgent",
    "content": "A custom agent managing the crew."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/tools/index.html": {
    "path": "Crew/References/tools",
    "link-uuid": "b979744b-b2b5-4da4-93c7-97a6a85381b0",
    "title": "tools",
    "content": "Tools containment reference."
  },
  "references/eClassifiers/Code/references/eStructuralFeatures/imports/index.html": {
    "path": "Code/Attributes/imports",
    "link-uuid": "bcc33513-0b4d-402d-a523-324be0af7e4f",
    "title": "imports",
    "content": "Imports used by code can be specified as a list of maps or a single map with the keys corresponding to Import attributes."
  },
  "references/eClassifiers/Crew/index.html": {
    "link-uuid": "525aa71e-56f1-4e14-a863-f1df111e6b0f",
    "title": "Crew",
    "content": "A crew represents a collaborative group of agents working together to accomplish a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow."
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/languageModels/index.html": {
    "path": "Crew/References/languageModels",
    "link-uuid": "9174e2ec-88c3-45aa-b75e-6c1d5e636f51",
    "title": "languageModels",
    "content": "Language models used by the crew and its agents"
  },
  "references/eClassifiers/Code/inheritance.html": {
    "path": "Code/Inheritance",
    "link-uuid": "b41c80e0-353d-4498-964a-dfb005910279",
    "title": "Inheritance",
    "content": "Subtypes "
  },
  "references/eClassifiers/Code/references/eStructuralFeatures/comment/index.html": {
    "path": "Code/Attributes/comment",
    "link-uuid": "689b7b26-63b3-4173-9f3c-92b838cfe372",
    "title": "comment",
    "content": "Comment to add before the code."
  },
  "references/eClassifiers/Callback/index.html": {
    "link-uuid": "ed5478da-a613-414c-97a2-2d12892079bb",
    "title": "Callback",
    "content": "Crew Step Callback - A function that is called after each step of every agent. Task Callback - A function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution. Agent Step Callback - Function called after each agent step, overrides crew callback. Task Callback - Function/object to be executed after task completion."
  },
  "references/eClassifiers/Tool/references/eStructuralFeatures/declarations/index.html": {
    "path": "Tool/Attributes/declarations",
    "link-uuid": "b5dce4c5-4f37-4cda-a0e3-a4a35c156b6d",
    "title": "declarations",
    "content": "Declarations used by the tool. Added to the crew class body. For example, a shared search tool can have the following declaration: serper_tool = SeperDevTool()\n In this case the tool code would be serper_tool"
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/knowledgeSources/index.html": {
    "path": "Agent/References/knowledgeSources",
    "link-uuid": "fd634625-19d3-4745-95c1-b16f73c941e8",
    "title": "knowledgeSources",
    "content": "Knowledge sources available to the agent."
  },
  "references/eClassifiers/Task/references/eStructuralFeatures/guardrail/index.html": {
    "path": "Task/References/guardrail",
    "link-uuid": "c6ccafe0-4aaf-400b-8573-c9f39b5a036e",
    "title": "guardrail",
    "content": "Task guardrails provide a way to validate and transform task outputs before they are passed to the next task. This feature helps ensure data quality and provides feedback to agents when their output doesn&rsquo;t meet specific criteria."
  },
  "references/eClassifiers/LargeLanguageModel/index.html": {
    "link-uuid": "cb329777-408c-4d78-b5d2-64c058c2f8ce",
    "title": "Large Language Model",
    "content": "Large Language Models (LLMs) are the core intelligence behind agents. They enable agents to understand context, make decisions, and generate human-like responses."
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/tools/index.html": {
    "path": "Agent/References/tools",
    "link-uuid": "5d67cd94-1570-4e62-b9d6-b194337c060b",
    "title": "tools",
    "content": "Capabilities or functions available to the agent."
  },
  "references/eClassifiers/Configurable/references/eStructuralFeatures/configuration/index.html": {
    "path": "Configurable/Attributes/configuration",
    "link-uuid": "0959e269-23b3-4d4e-b326-bd93f7561643",
    "title": "configuration",
    "content": "YAML configuration."
  },
  "references/eClassifiers/Agent/references/eStructuralFeatures/functionCallingLlm/index.html": {
    "path": "Agent/References/functionCallingLlm",
    "link-uuid": "bd00d91d-edab-4716-88fc-821a9d214c39",
    "title": "functionCallingLlm",
    "content": "Language model for tool calling, overrides crew&rsquo;s LLM if specified."
  },
  "references/eClassifiers/Task/references/eStructuralFeatures/agent/index.html": {
    "path": "Task/References/agent",
    "link-uuid": "a1d13f23-beb3-4f3a-8dfd-930aeb3a998a",
    "title": "agent",
    "content": "The agent responsible for executing the task."
  },
  "references/eClassifiers/Configurable/inheritance.html": {
    "path": "Configurable/Inheritance",
    "link-uuid": "5d87f201-42e8-4232-b035-8fa984cc6e06",
    "title": "Inheritance",
    "content": "Supertypes Subtypes  "
  },
  "references/eClassifiers/Callback/inheritance.html": {
    "path": "Callback/Inheritance",
    "link-uuid": "a92a1fad-cbc8-4630-b83f-4db704c65c9b",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Crew/inheritance.html": {
    "path": "Crew/Inheritance",
    "link-uuid": "de006e8b-d0a6-46c2-89f4-5755a426c63e",
    "title": "Inheritance",
    "content": "Supertypes "
  },
  "references/eClassifiers/Crew/references/eStructuralFeatures/beforeKickoff/index.html": {
    "path": "Crew/References/beforeKickoff",
    "link-uuid": "6235400b-5b1b-4bea-b192-d1408e8b56af",
    "title": "beforeKickoff",
    "content": "Executes before the crew starts."
  },
  "references/eClassifiers/Code/index.html": {
    "link-uuid": "82256c26-e045-47e0-9f98-102766f52226",
    "title": "Code",
    "content": "Base class for model element which generate python code."
  }
}